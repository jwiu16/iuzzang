<?xml version="1.0" encoding="UTF-8"?>
<!DOCTYPE mapper
    PUBLIC "-//mybatis.org//DTD Mapper 3.0//EN"
    "https://mybatis.org/dtd/mybatis-3-mapper.dtd">
<mapper namespace="com.itwillbs.c5d2308t1.mapper.LoginMapper">
	
	<!-- 회원 정보 조회 -->
	<select id="selectMember" resultType="com.itwillbs.c5d2308t1.vo.MemberVO">
	    SELECT *
	    FROM members m
	    WHERE m.member_id = #{member_id}
	</select>
	

	<select id="selectMovieListCount" resultType="int">
	SELECT COUNT(*)
	FROM movies
	<if test="!searchKeyword.equals('')">
		WHERE
			movie_title LIKE '%${searchKeyword}%'
	</if>
	</select>
	
	<!-- 한 페이지에 표시할 영화 목록 조회 작업 -->
	<select id="selectMovieList" resultType="movies">
		SELECT *
		FROM movies
		<if test="!searchKeyword.equals('')">
			WHERE
				movie_title LIKE '%${searchKeyword}%'
		</if>
		ORDER BY movie_release_date DESC
		LIMIT #{page.startRow}, #{page.listLimit}
	</select>
	
	<!-- 예매 취소내역 조회를 위한 작업 -->
	<!-- 예매 페이지에 있는 영화제목,예약시간,예약상태 조회 작업 -->
	<select id="getReserveList" resultType="com.itwillbs.c5d2308t1.vo.RefundVO">
		SELECT payment_id, payment_datetime , member_id, payment_status, movie_title, payment_total_price, movie_id
		FROM resView
		WHERE payment_status = 0 AND member_id = #{member_id}
	</select>
	
	<!-- 회원 정보 수정 -->
	<update id="updateMember">
		UPDATE member
		SET
<!-- 			<if test="newEmail != null and !newEmail.equals('')"> -->
				member_email = #{newEmail}
<!-- 			</if> -->
<!-- 			<if test="newPasswd != null and !newPasswd.equals('')"> -->
				,member_passwd = #{newPasswd}
<!-- 			</if> -->
		WHERE
			member_id = #{member.id}
	</update>
	
<!-- =================================================================== -->	
<!-- ============ 마이페이지 나의게시글 1대1문의 ================= -->
	<!-- 1대1문의 글 목록 조회 -->
	<select id="selectMyOneOnOneList" resultType="hashmap">
		SELECT *
		FROM members m
		JOIN cs c
		ON m.member_id = c.member_id
		WHERE cs_type = '1대1문의'
		AND m.member_id = #{sId}
		ORDER BY cs_date DESC
 		LIMIT #{page.startRow}, #{page.listLimit}
	</select>
	
	<!-- 1대1문의 페이징 처리를 위한 게시물 개수 조회 -->
	<select id="selectMyOneOnOnePostsCount" resultType="int">
		SELECT COUNT(*)
		FROM members m
		JOIN cs c
		ON m.member_id = c.member_id
		WHERE cs_type = '1대1문의'
		AND m.member_id = #{sId}
	</select>
	
	
	<!-- 1대1문의 글 상세 조회 -->
	<select id="selectMyOneOnOneDetail" resultType="hashmap">
		SELECT *
		FROM cs
		LEFT OUTER JOIN theaters
		ON theaters.theater_id = cs.theater_id
		WHERE cs_type = '1대1문의'
		AND cs_id = #{cs_id}
	</select>	
	
	<!-- 1대1문의 글 삭제 -->
	<delete id="deleteMyOneOnOne">
		DELETE FROM cs
		WHERE cs_id = #{cs_id} and member_id = #{member_id}
	</delete>
	
	<!-- =============================================================================== -->
	<!-- 분실물 조회 -->
	<select id="selectLostList" resultType="com.itwillbs.c5d2308t1.vo.CsVO">
		SELECT cs_id, cs_subject , cs_date, cs_type, member_id, theater_name
		FROM cs JOIN theaters
		ON cs.theater_id = theaters.theater_id
		WHERE cs_type = '분실물문의' and member_id = #{member_id}
	</select>
	
	<!-- 분실물 상세 조회 -->	
	<select id="selectMyLost" resultType="hashmap">
		SELECT *
		FROM cs JOIN theaters
		ON cs.theater_id = theaters.theater_id
		WHERE cs_type = '분실물문의'
		and cs_id = #{cs_id}
	</select>
	
	<!-- 분실물 페이징 처리를 위한 게시물 개수 조회 -->
	
		<select id="getLostBoardCount" resultType="int">
		SELECT COUNT(*)
		FROM members m
		JOIN cs c
		ON m.member_id = c.member_id
		WHERE cs_type = '분실물문의'
		and c.member_id = #{sId}
		</select>
	
	<!-- 분실물 페이징 처리를 위한 게시물 조회 -->
		<select id="selectLostListCount" resultType="hashmap">
			SELECT *
			FROM members m
			JOIN cs c ON m.member_id = c.member_id
			JOIN theaters t ON t.theater_id = c.theater_id
			WHERE c.cs_type = '분실물문의'
			AND m.member_id = #{sId}
			ORDER BY cs_date DESC
			LIMIT #{page.startRow}, #{page.listLimit}
		</select>
		
			<!-- 분실물 문의 글 상세 조회 -->
	<select id="selectMyLostDetail" resultType="hashmap">
		SELECT *
		FROM cs
		LEFT OUTER JOIN theaters
		ON theaters.theater_id = cs.theater_id
		WHERE cs_type = '분실물문의'
		AND cs_id = #{cs_id}
	</select>	
		
	<!-- 분실물 삭제 처리 -->
	<delete id="deleteMyLost">
		DELETE FROM cs
		WHERE cs_id = #{cs_id} and member_id = #{member_id}
	</delete>
		
	<!-- 리뷰 조회 -->
	<select id="selectMyreview" resultType="com.itwillbs.c5d2308t1.vo.ReviewsVO">
	    SELECT review_id, review_content, review_date, r.movie_id, r.member_id, m.movie_title
	    FROM reviews r JOIN movies m
	    ON r.movie_id = m.movie_id
	    WHERE member_id = #{member_id}
	</select>
	
	<!-- 리뷰 페이징 처리를 위한 조회 -->
	<select id="selectMyReviewList" resultType="hashmap">
	    SELECT review_id, review_content, review_date, r.movie_id, r.member_id, m.movie_title
	    FROM reviews r JOIN movies m
	    ON r.movie_id = m.movie_id
	    WHERE member_id = #{sId}
		ORDER BY review_date DESC
		LIMIT #{page.startRow}, #{page.listLimit}
	</select>
	
	<!-- 리뷰 페이징 처리를위한 총 갯수 조회 -->
	<select id="getMyReviewCount" resultType="int">
		SELECT count(*)
		FROM reviews
		WHERE member_id = #{sId}
	</select>
	
	<!-- 리뷰 상세 조회 -->
	<select id="selectMyreviewDetail" resultType="com.itwillbs.c5d2308t1.vo.ReviewsVO">
	    SELECT review_id, review_content, review_date, r.movie_id, r.member_id, m.movie_title
	    FROM reviews r JOIN movies m
	    ON r.movie_id = m.movie_id
	    WHERE review_id = #{review_id}
	  	order by review_date DESC
	</select>
	
	<!-- 리뷰 삭제 -->
	<delete id="deleteMyreview">
		DELETE FROM reviews
		WHERE review_id = #{review_id}
	</delete>

	<!-- =============================  상품 구매 내역 ========================================================= -->
	<select id="getStoreListCount" >
		SELECT COUNT(DISTINCT payment_name)
		FROM ordersView
		WHERE member_id = #{sId}
	</select>
	
	<!-- 나의 상품 구매내역 조회를 위한 작업 -->
	<select id="getMyStoreSelect" resultType="com.itwillbs.c5d2308t1.vo.RefundVO">
		SELECT payment_name, member_name, member_id, sum(quantity) AS quantity
		, GROUP_CONCAT(product_name) AS product_name, payment_card_name, payment_datetime
		, sum(payment_total_price) AS payment_total_price, payment_status
		FROM ordersView
		GROUP BY payment_name, member_name, member_id, payment_datetime, payment_status, payment_card_name
		HAVING member_id = #{sId}
		ORDER BY payment_datetime DESC
		LIMIT #{page.startRow}, #{page.listLimit}
	</select>
	
	<!-- 상품 구매내역 상세 페이지 -->
	<select id="getMyStoreDetail" resultType="com.itwillbs.c5d2308t1.vo.RefundVO">
		SELECT payment_name, member_name, member_id, sum(quantity) AS quantity
		, GROUP_CONCAT(product_name) AS product_name, payment_card_name, payment_datetime
		, sum(payment_total_price) AS payment_total_price, payment_status
		FROM ordersView
		GROUP BY payment_name, member_name, member_id, payment_datetime, payment_status, payment_card_name
		HAVING payment_name = #{payment_name} 
	</select>
		
	<!-- 상품 구매내역 구매 취소 요청 작업 -->
	<update id="updateMyBuy">
		UPDATE payments
		SET payment_status = 0
		WHERE payment_name = #{payment_name}
	</update>
	
	<!-- 최근 상품 구매내역 조회 -->
	<select id="selectMypageProductList" resultType="refund">
		SELECT payment_name, member_name, member_id, sum(quantity) AS quantity
        , GROUP_CONCAT(product_name) AS product_name, payment_datetime
        , sum(payment_total_price) AS payment_total_price, payment_status
        FROM ordersView
        GROUP BY payment_name, member_name, member_id, payment_datetime, payment_status
        HAVING payment_name LIKE 'ORD%'
		AND member_id = #{sId}
        ORDER BY payment_datetime DESC
        LIMIT 2
	</select>
	<!-- ============================== 상품 구매 내역 ======================================== -->
	
	<!-- 회원 비밀번호 변경을 위한 업데이트 -->
	<update id="checkMember">
	UPDATE members
	SET
		member_passwd = #{newPasswd} -- 새 패스워드가 존재할 경우 기존 패스워드 변경
	WHERE
		member_id = #{sId}
	</update>
	
	<!-- 회원 아이디 찾기를 위한 조회 -->
	<select id="selectFindId" resultType="member">
		SELECT *
		FROM members
		WHERE member_name = #{member_name}
		AND member_email = #{member_email}
	</select>
	
	<!-- 회원 비밀번호 찾기를 위한 조회 -->
	<select id="selectFindPasswd" resultType="member">
		SELECT *
		FROM members
		WHERE member_id = #{member_id}
	</select>

	<!-- 비밀번호 찾기를 통한 비밀번호 수정 -->	
	<update id="updateMemberPw">
		UPDATE members
		SET 
			member_passwd = #{newPasswd}
		WHERE
			member_id = #{member.member_id}
	</update>

	<select id="selectMemberPs">
    SELECT member_passwd
    FROM members
    WHERE member_id = #{member_id}
	</select>

	<update id="statusMember">
	    UPDATE members
	    SET member_status = 2
	    WHERE member_id = #{member_id}
	</update>
</mapper>













